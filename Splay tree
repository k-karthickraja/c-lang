             /*
 * =====================================================================================
 *
 *       Filename:  splay tree.c
 *
 *    Description:  Zig_func for the splay tree.
 *
 *        Version:  1.0
 *        Created:  Saturday 31 May 2014 
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Karthick Raja.k , karthickraja@bksystems.co.in
 *        Company:  bk systems(p)LTD.,Chennai-18
 *
 * =====================================================================================
 */

#include<stdio.h>
#include<stdlib.h>
#include<string.h>


#define TRUE 1
#define FALSE 0
#define ERR  -1
// Tree Structure.

void	splay ( void ) ; 

typedef struct reg { 
	int	data ; 
	struct reg  *parent;
	struct reg  *left ;
	struct reg  *right ;
} node ;

node *root=NULL;
node *last_access=NULL;
node *new_node (void) 	/*  Function for the creation of new node */
{
	int	no ;
	node *tmp; 

	tmp = ( node * ) malloc ( sizeof(node));

	if ( ! tmp ) 
		return NULL ;
	
	printf("\n Enter the Data : ");
	scanf("%d",&no);

	tmp->data = no ; 
	tmp->left = NULL;
	tmp->right = NULL ;
	tmp->parent = NULL ;

	return tmp ; 
}

node *isexist(node *tmp , int data) 	/*  To check that the data has exist or not */
{
	if ( ! tmp ) 
		return NULL ;
	
	if ( tmp->data == data ) 
		return tmp ;
	else if ( tmp->data < data ) 
		return isexist ( tmp->right , data )  ;
	else 
		return isexist( tmp->left , data ) ; 

}

node *add_data(node *tmp , node *new,node *parent)
{
	if ( !new ) 
	{
		printf("\n Data is not avail \n " );
		return NULL ; 
	}

	if ( tmp == NULL  ) 	/*  True when tmp NULL */
	{
		tmp=new;	
		tmp->parent=parent;
		
		if ( ! parent ) 	/*  Root */
			root=tmp;
		else if ( parent->data > new->data ) 
			parent->left=new;
		else
			parent->right=new;
	}
	else if ( tmp->data > new->data ) 
		add_data(tmp->left , new ,tmp) ;
	else if ( tmp->data < new->data )
		add_data(tmp->right , new , tmp) ;
	else
		printf("\n\n Data Exist aleady \n");	/*  No assignation */

	return new; 	/*  correct Case */

}
int	rm_data( int data)	
{
	int	n ; 
	node	*tmp;
	node 	*tmp1;
	node	*large_right ;

	void	unlink(node *tmp,node *new);


	if ( !(tmp=isexist(root, data)) )
	{
		printf("The given data is not exist \n\n");
		return FALSE ;
	}


	/*  The removal node has in the tmp */
	/*  I replaces the tmp with its largest right subtree. */

	if ( (tmp1=tmp->left )) 	/* if the tmp->left was NULL. */
		while ( tmp1->right )	/*  Untill the largest value. */
			tmp1=tmp1->right ; 
	else if ( (tmp1=tmp->right))
		while ( tmp1->left )	/*  Untill the largest value. */
			tmp1=tmp1->left ; 
	else
	{
		/*  This true when the tmp node was leaf. */

		unlink(tmp,NULL);
		return TRUE;

	}



	/*  Now tmp1 has the largest right sub node. */
	if ( ! tmp1 )		/*  If remaval is an leaf NODE. */
		tmp->data = -1 ; 
	else
	{
		if ( tmp1->left ) 
			unlink(tmp1,tmp1->left);
		else 
			unlink(tmp1,tmp1->right);

		tmp->data = tmp1->data ;	/*  To replace at location tmp */

		free(tmp1);			/*  Freeing the memory. */

	}
	last_access=tmp;
	splay();
	return TRUE ;	

}

void	unlink(node *cur ,node *new ) 	/*  make a link to parent of current to new */ 
{
	node *tmp1;
	
	if ( cur == NULL )
		return ;

	tmp1=cur->parent ;	/*  get the previous node value. */		

//	printf("\n Unlink called For %d ",cur->data);
	if ( !tmp1 ) 			/*  tmp is NULL then root is deltable node. */
	{
		root=new;		/*  root is tmp */
		printf("\n root node has resetted \n");
		return ;
	}
	
//	printf(" its parent %d\n",tmp1->data);

	if ( tmp1->data > cur->data )   /*  left child was deletable. */
	{
		printf("\n %d's left was set to new ",tmp1->data);
		tmp1->left=new;
	}
	else
		tmp1->right=new;

	/*  To change its child's parent address to new */ 
	cur->parent=NULL;

	if ( new ) 
	{
//		printf(" values was %d \n",new->data);
		new->parent=tmp1;   /*  Current parent */
	}

	return ;

}
int	ls_data(node *root,int choice)
{
	if ( ! root )
		return FALSE ; 


	if ( ! choice  ) 
	{

		printf("\n Traversal Avail \n");
		printf("In-Order  [ left - root - right ]  ----> 1 \n");
		printf("Pre-Order [ root - left - right ]  ----> 2 \n");
		printf("Post-Order[ left - right - root ]  ----> 3 \n");

		printf("\n\tEnter Your Option [1][2][3]  : ");
		scanf("%d",&choice);

	}

	if ( choice == 1 ) 	// In-order . 
	{
		ls_data(root->left,choice);
		printf("\t %d \n",root->data);
		ls_data(root->right,choice);
	}
	else if ( choice == 2 )
	{
		printf("\t %d \n",root->data);
		ls_data(root->left,choice);
		ls_data(root->right,choice);



	}
	else if ( choice == 3 ) 
	{
		ls_data(root->left,choice);
		ls_data(root->right,choice);
		printf("\t %d \n",root->data);
	}
			
	return TRUE;
}

void terminate ( node *root ) 
{
	node *tmp;
	tmp=root;
	if ( tmp ) 
	{
		terminate ( tmp->left ) ; 
		terminate ( tmp->right ); 
	}

	free ( tmp ) ; 
}
void	main()
{
	int	choice,rt;
	void 	zig ( node *); 
	void 	zag ( node *); 
	void	splay ( void );
	node	*tmp;

	while ( TRUE ) 
	{
		system("clear");
		printf("\t\t\tSplay tree \n\t\t\t^^^ ^^^^^^^\n");
		printf("Insertion    		-----> 1 \n");
		printf("Delete an data 		-----> 2 \n");
		printf("List all the datas 	-----> 3 \n");
		printf("Search a node 		-----> 4 \n");
		printf("To quit			-----> 0 \n");
		printf("\n\t\t Enter Your choice : ");
		scanf("%d",&choice);


		switch(choice)
		{
			case 0:
				terminate(root);
				exit(1);
			case 1:
				/*  Calling new function,which creates the tree,  */
				tmp=add_data(root,new_node(),root);

				if ( tmp )
				{
					printf("\n%d insertion success!\n",tmp->data );
					last_access=tmp;
					splay();	/* Calling the function splay tree */
				}
				else
					printf("\ninsertion Failed!\n");

				break;
			case 3:
				printf("\n\n\t DATA'S IN TREE \n\n");
				rt=ls_data(root,0);

				if ( ! rt ) 
					printf("\n No datas\n");

				break;

			case 2:
				printf("Enter the data to delete : ");
				scanf("%d",&rt);
				rt=rm_data(rt);

				if ( rt ) 
					printf("\nDeletion Suceeded!\n");
				else
					printf("\nDeletion Failed !\n");
				break;

			case 4:
				printf("Enter the node : ");
				scanf("%d",&rt);

				tmp=isexist(root,rt);

				if ( tmp ) 
				{
					printf("\t D : %d ",tmp->data);
					if ( tmp->left ) 
						printf("\t L : %d ",tmp->left->data);
					if ( tmp->right ) 
						printf("\t R : %d ",tmp->right->data);
					if ( tmp->parent )
						printf("\t P : %d ",tmp->parent->data);
					last_access=tmp;
					splay();

				}
				else
					printf("\n node Not exist \n");

					 
				break;

		}
		sleep(3);
		rt=0;
		tmp=NULL;
		choice=0;
		
	}
}

void 	zig (node *x)
{
	
	node 	*tmp;
	node	*p;
	
	/*  Initialization */
	p=x->parent;
	
	tmp=x->right;		/*  Since zig rotate left to right */
	x->right=p;
	x->parent=p->parent;
	p->parent=x;
	p->left=tmp;
}

void	zag ( node *x)
{
	node 	*tmp;
	node	*p;
	
	/*  Initialization */
	p=x->parent;
	
	tmp=x->left;		/*  Since zig rotate left to right */
	x->left=p;
	x->parent=p->parent;
	p->parent=x;
	p->right=tmp;
}

void	splay ( void )
{
	if ( last_access==NULL )
		return ;
	
	node 	*p;
	p=last_access->parent;

	while ( p ) 
	{
		if ( p->data < last_access->data ) 
			zag(last_access);
		else
			zig(last_access);
		
		p=last_access->parent;
	}
	root=last_access;

}
